{
  "api/Mew.Core.IntervalTimerType.html": {
    "href": "api/Mew.Core.IntervalTimerType.html",
    "title": "Enum IntervalTimerType | MewCore",
    "keywords": "Enum IntervalTimerType Namespace Mew.Core Assembly Mew.Core.dll public enum IntervalTimerType Fields ManualUpdate = 3 SystemTime = 0 UnityTime = 1 UnityUnscaledTime = 2"
  },
  "api/Mew.Core.LagProcessType.html": {
    "href": "api/Mew.Core.LagProcessType.html",
    "title": "Enum LagProcessType | MewCore",
    "keywords": "Enum LagProcessType Namespace Mew.Core Assembly Mew.Core.dll public enum LagProcessType Fields Flood = 1 Skip = 0"
  },
  "api/Mew.Core.MewLoop.html": {
    "href": "api/Mew.Core.MewLoop.html",
    "title": "Class MewLoop | MewCore",
    "keywords": "Class MewLoop Namespace Mew.Core Assembly Mew.Core.dll public class MewLoop Inheritance object MewLoop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(UpdateFunction) Add update callback function to default delegate collection. Default delegate collection is set through SetDefaultCollection(). public static void Add(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions NullReferenceException Add(string, UpdateFunction) Add update callback function to delegate collection for id. public static void Add(string id, MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters id string updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions KeyNotFoundException Add<T>(UpdateFunction) Add update callback function to delegate collection for type T. public static void Add<T>(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Type Parameters T LoopId<T>() public static string LoopId<T>() Returns string Type Parameters T Register(string, MewLoopDelegateCollection) Register delegate collection for id. public static void Register(string id, MewLoopDelegateCollection delegateCollection) Parameters id string delegateCollection MewLoopDelegateCollection Register<T>(MewLoopDelegateCollection) Register delegate collection for type T. public static void Register<T>(MewLoopDelegateCollection delegateCollection) Parameters delegateCollection MewLoopDelegateCollection Type Parameters T Remove(UpdateFunction) Remove update callback function from default delegate collection. public static void Remove(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions NullReferenceException Remove(string, UpdateFunction) Remove update callback function from delegate collection for id. public static void Remove(string id, MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters id string updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions KeyNotFoundException Remove<T>(UpdateFunction) Remove update callback function from delegate collection for type T. public static void Remove<T>(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Type Parameters T SetDefaultCollection(string?) Set default delegate collection id. public static void SetDefaultCollection(string? id) Parameters id string SetDefaultCollection<T>() Set default delegate collection id as T. public static void SetDefaultCollection<T>() Type Parameters T Update() Invoke update callback functions in default delegate collection. public static void Update() Exceptions NullReferenceException Update(string) Invoke update callback functions in delegate collection for id. public static void Update(string id) Parameters id string Exceptions KeyNotFoundException Update<T>() Invoke update callback functions in delegate collection for type T. public static void Update<T>() Type Parameters T"
  },
  "api/Mew.Core.MewLoopDelegateCollection.UpdateFunction.html": {
    "href": "api/Mew.Core.MewLoopDelegateCollection.UpdateFunction.html",
    "title": "Delegate MewLoopDelegateCollection.UpdateFunction | MewCore",
    "keywords": "Delegate MewLoopDelegateCollection.UpdateFunction Namespace Mew.Core Assembly Mew.Core.dll public delegate void MewLoopDelegateCollection.UpdateFunction()"
  },
  "api/Mew.Core.MewLoopDelegateCollection.html": {
    "href": "api/Mew.Core.MewLoopDelegateCollection.html",
    "title": "Class MewLoopDelegateCollection | MewCore",
    "keywords": "Class MewLoopDelegateCollection Namespace Mew.Core Assembly Mew.Core.dll public class MewLoopDelegateCollection Inheritance object MewLoopDelegateCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(UpdateFunction) public void Add(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Invoke() public void Invoke() Remove(UpdateFunction) public void Remove(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Operators operator +(MewLoopDelegateCollection, UpdateFunction) public static MewLoopDelegateCollection operator +(MewLoopDelegateCollection collection, MewLoopDelegateCollection.UpdateFunction func) Parameters collection MewLoopDelegateCollection func MewLoopDelegateCollection.UpdateFunction Returns MewLoopDelegateCollection operator -(MewLoopDelegateCollection, UpdateFunction) public static MewLoopDelegateCollection operator -(MewLoopDelegateCollection collection, MewLoopDelegateCollection.UpdateFunction func) Parameters collection MewLoopDelegateCollection func MewLoopDelegateCollection.UpdateFunction Returns MewLoopDelegateCollection"
  },
  "api/Mew.Core.MewLoopUnityInitializer.html": {
    "href": "api/Mew.Core.MewLoopUnityInitializer.html",
    "title": "Class MewLoopUnityInitializer | MewCore",
    "keywords": "Class MewLoopUnityInitializer Namespace Mew.Core Assembly Mew.Core.dll public static class MewLoopUnityInitializer Inheritance object MewLoopUnityInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Mew.Core.MewManualUpdate.html": {
    "href": "api/Mew.Core.MewManualUpdate.html",
    "title": "Struct MewManualUpdate | MewCore",
    "keywords": "Struct MewManualUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewManualUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityEarlyUpdate.html": {
    "href": "api/Mew.Core.MewUnityEarlyUpdate.html",
    "title": "Struct MewUnityEarlyUpdate | MewCore",
    "keywords": "Struct MewUnityEarlyUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityEarlyUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityFixedUpdate.html": {
    "href": "api/Mew.Core.MewUnityFixedUpdate.html",
    "title": "Struct MewUnityFixedUpdate | MewCore",
    "keywords": "Struct MewUnityFixedUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityFixedUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPostLateUpdate.html": {
    "href": "api/Mew.Core.MewUnityPostLateUpdate.html",
    "title": "Struct MewUnityPostLateUpdate | MewCore",
    "keywords": "Struct MewUnityPostLateUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPostLateUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPreLateUpdate.html": {
    "href": "api/Mew.Core.MewUnityPreLateUpdate.html",
    "title": "Struct MewUnityPreLateUpdate | MewCore",
    "keywords": "Struct MewUnityPreLateUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPreLateUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPreUpdate.html": {
    "href": "api/Mew.Core.MewUnityPreUpdate.html",
    "title": "Struct MewUnityPreUpdate | MewCore",
    "keywords": "Struct MewUnityPreUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPreUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityUpdate.html": {
    "href": "api/Mew.Core.MewUnityUpdate.html",
    "title": "Struct MewUnityUpdate | MewCore",
    "keywords": "Struct MewUnityUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.TaskAction.html": {
    "href": "api/Mew.Core.TaskAction.html",
    "title": "Delegate TaskAction | MewCore",
    "keywords": "Delegate TaskAction Namespace Mew.Core Assembly Mew.Core.dll public delegate Task TaskAction(CancellationToken ct) Parameters ct CancellationToken Returns Task"
  },
  "api/Mew.Core.TaskInterval-1.html": {
    "href": "api/Mew.Core.TaskInterval-1.html",
    "title": "Class TaskInterval<T> | MewCore",
    "keywords": "Class TaskInterval<T> Namespace Mew.Core Assembly Mew.Core.dll public class TaskInterval<T> : TaskInterval, IDisposable Type Parameters T Inheritance object TaskInterval TaskInterval<T> Implements IDisposable Inherited Members TaskInterval.IntervalTimerType TaskInterval.LagProcessType TaskInterval.Interval TaskInterval.LoopId TaskInterval.Start(CancellationToken?) TaskInterval.Tick(float) TaskInterval.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval"
  },
  "api/Mew.Core.TaskInterval.html": {
    "href": "api/Mew.Core.TaskInterval.html",
    "title": "Class TaskInterval | MewCore",
    "keywords": "Class TaskInterval Namespace Mew.Core Assembly Mew.Core.dll public class TaskInterval : IDisposable Inheritance object TaskInterval Implements IDisposable Derived TaskInterval<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskInterval(TimeSpan, TaskAction, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string TaskInterval(TimeSpan, Action, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, Action action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string Properties Interval public TimeSpan Interval { get; } Property Value TimeSpan IntervalTimerType public IntervalTimerType IntervalTimerType { get; } Property Value IntervalTimerType LagProcessType public LagProcessType LagProcessType { get; } Property Value LagProcessType LoopId public string LoopId { get; } Property Value string Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Dispose() public void Dispose() Start(CancellationToken?) Run action every interval. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskInterval when ct is cancelled. Exceptions ObjectDisposedException Tick(float) Progress timer manually. public void Tick(float elapsedTime) Parameters elapsedTime float Exceptions ObjectDisposedException"
  },
  "api/Mew.Core.TaskQueue-1.html": {
    "href": "api/Mew.Core.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | MewCore",
    "keywords": "Class TaskQueue<T> Namespace Mew.Core Assembly Mew.Core.dll TaskQueue for specific loop. public class TaskQueue<T> : TaskQueue, IDisposable Type Parameters T Loop Timing Type Inheritance object TaskQueue TaskQueue<T> Implements IDisposable Inherited Members TaskQueue.loopId TaskQueue.LimitType TaskQueue.MaxSize TaskQueue.Count TaskQueue.Disposed TaskQueue.Start(CancellationToken?) TaskQueue.Enqueue(TaskAction, int) TaskQueue.Dispose() TaskQueue.Any() TaskQueue.WaitForEmptyAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue() public TaskQueue() TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType, int maxSize) Parameters taskQueueLimitType TaskQueueLimitType maxSize int"
  },
  "api/Mew.Core.TaskQueue.html": {
    "href": "api/Mew.Core.TaskQueue.html",
    "title": "Class TaskQueue | MewCore",
    "keywords": "Class TaskQueue Namespace Mew.Core Assembly Mew.Core.dll public class TaskQueue : IDisposable Inheritance object TaskQueue Implements IDisposable Derived TaskQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType = TaskQueueLimitType.None, int maxSize = 0) Parameters taskQueueLimitType TaskQueueLimitType maxSize int Fields loopId protected string loopId Field Value string Properties Count Count of running or waiting tasks. public int Count { get; } Property Value int Disposed true if disposed. public bool Disposed { get; } Property Value bool LimitType public TaskQueueLimitType LimitType { get; } Property Value TaskQueueLimitType MaxSize public int MaxSize { get; } Property Value int Methods Any() public bool Any() Returns bool Dispose() public void Dispose() Enqueue(TaskAction, int) public void Enqueue(TaskAction func, int priority = 0) Parameters func TaskAction priority int Start(CancellationToken?) Start TaskQueue. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskQueue when ct is cancelled. Exceptions ObjectDisposedException WaitForEmptyAsync() public Task WaitForEmptyAsync() Returns Task"
  },
  "api/Mew.Core.TaskQueueLimitType.html": {
    "href": "api/Mew.Core.TaskQueueLimitType.html",
    "title": "Enum TaskQueueLimitType | MewCore",
    "keywords": "Enum TaskQueueLimitType Namespace Mew.Core Assembly Mew.Core.dll public enum TaskQueueLimitType Fields Discard = 2 Keep queue and discard new task. None = 0 SwapLast = 1 Discard last less-or-equal priority task. Then enqueue. If all tasks have higher priority, discard new task."
  },
  "api/Mew.Core.TaskWithPriority.html": {
    "href": "api/Mew.Core.TaskWithPriority.html",
    "title": "Class TaskWithPriority | MewCore",
    "keywords": "Class TaskWithPriority Namespace Mew.Core Assembly Mew.Core.dll public class TaskWithPriority Inheritance object TaskWithPriority Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskWithPriority(TaskAction, int) public TaskWithPriority(TaskAction func, int priority) Parameters func TaskAction priority int Properties Func public TaskAction Func { get; } Property Value TaskAction Priority public int Priority { get; } Property Value int"
  },
  "api/Mew.Core.Tasks.IntervalTimerType.html": {
    "href": "api/Mew.Core.Tasks.IntervalTimerType.html",
    "title": "Enum IntervalTimerType | MewCore",
    "keywords": "Enum IntervalTimerType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum IntervalTimerType Fields ManualUpdate = 3 SystemTime = 0 UnityTime = 1 UnityUnscaledTime = 2"
  },
  "api/Mew.Core.Tasks.LagProcessType.html": {
    "href": "api/Mew.Core.Tasks.LagProcessType.html",
    "title": "Enum LagProcessType | MewCore",
    "keywords": "Enum LagProcessType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum LagProcessType Fields Flood = 1 Skip = 0"
  },
  "api/Mew.Core.Tasks.TaskAction.html": {
    "href": "api/Mew.Core.Tasks.TaskAction.html",
    "title": "Delegate TaskAction | MewCore",
    "keywords": "Delegate TaskAction Namespace Mew.Core.Tasks Assembly Mew.Core.dll public delegate Task TaskAction(CancellationToken ct) Parameters ct CancellationToken Returns Task"
  },
  "api/Mew.Core.Tasks.TaskInterval-1.html": {
    "href": "api/Mew.Core.Tasks.TaskInterval-1.html",
    "title": "Class TaskInterval<T> | MewCore",
    "keywords": "Class TaskInterval<T> Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskInterval<T> : TaskInterval, IDisposable Type Parameters T Inheritance object TaskInterval TaskInterval<T> Implements IDisposable Inherited Members TaskInterval.IntervalTimerType TaskInterval.LagProcessType TaskInterval.Interval TaskInterval.LoopId TaskInterval.Start(CancellationToken?) TaskInterval.Tick(float) TaskInterval.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval"
  },
  "api/Mew.Core.Tasks.TaskInterval.html": {
    "href": "api/Mew.Core.Tasks.TaskInterval.html",
    "title": "Class TaskInterval | MewCore",
    "keywords": "Class TaskInterval Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskInterval : IDisposable Inheritance object TaskInterval Implements IDisposable Derived TaskInterval<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskInterval(TimeSpan, TaskAction, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string TaskInterval(TimeSpan, Action, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, Action action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string Properties Interval public TimeSpan Interval { get; } Property Value TimeSpan IntervalTimerType public IntervalTimerType IntervalTimerType { get; } Property Value IntervalTimerType LagProcessType public LagProcessType LagProcessType { get; } Property Value LagProcessType LoopId public string LoopId { get; } Property Value string Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Dispose() public void Dispose() Start(CancellationToken?) Run action every interval. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskInterval when ct is cancelled. Exceptions ObjectDisposedException Tick(float) Progress timer manually. public void Tick(float elapsedTime) Parameters elapsedTime float Exceptions ObjectDisposedException"
  },
  "api/Mew.Core.Tasks.TaskQueue-1.html": {
    "href": "api/Mew.Core.Tasks.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | MewCore",
    "keywords": "Class TaskQueue<T> Namespace Mew.Core.Tasks Assembly Mew.Core.dll TaskQueue for specific loop. public class TaskQueue<T> : TaskQueue, IDisposable Type Parameters T Loop Timing Type Inheritance object TaskQueue TaskQueue<T> Implements IDisposable Inherited Members TaskQueue.loopId TaskQueue.LimitType TaskQueue.MaxSize TaskQueue.Count TaskQueue.Disposed TaskQueue.Start(CancellationToken?) TaskQueue.Enqueue(TaskAction, int) TaskQueue.Dispose() TaskQueue.Any() TaskQueue.WaitForEmptyAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue() public TaskQueue() TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType, int maxSize) Parameters taskQueueLimitType TaskQueueLimitType maxSize int"
  },
  "api/Mew.Core.Tasks.TaskQueue.html": {
    "href": "api/Mew.Core.Tasks.TaskQueue.html",
    "title": "Class TaskQueue | MewCore",
    "keywords": "Class TaskQueue Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskQueue : IDisposable Inheritance object TaskQueue Implements IDisposable Derived TaskQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType = TaskQueueLimitType.None, int maxSize = 0) Parameters taskQueueLimitType TaskQueueLimitType maxSize int Fields loopId protected string loopId Field Value string Properties Count Count of running or waiting tasks. public int Count { get; } Property Value int Disposed true if disposed. public bool Disposed { get; } Property Value bool LimitType public TaskQueueLimitType LimitType { get; } Property Value TaskQueueLimitType MaxSize public int MaxSize { get; } Property Value int Methods Any() public bool Any() Returns bool Dispose() public void Dispose() Enqueue(TaskAction, int) public void Enqueue(TaskAction func, int priority = 0) Parameters func TaskAction priority int Start(CancellationToken?) Start TaskQueue. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskQueue when ct is cancelled. Exceptions ObjectDisposedException WaitForEmptyAsync() public Task WaitForEmptyAsync() Returns Task"
  },
  "api/Mew.Core.Tasks.TaskQueueLimitType.html": {
    "href": "api/Mew.Core.Tasks.TaskQueueLimitType.html",
    "title": "Enum TaskQueueLimitType | MewCore",
    "keywords": "Enum TaskQueueLimitType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum TaskQueueLimitType Fields Discard = 2 Keep queue and discard new task. None = 0 SwapLast = 1 Discard last less-or-equal priority task. Then enqueue. If all tasks have higher priority, discard new task."
  },
  "api/Mew.Core.Tasks.TaskWithPriority.html": {
    "href": "api/Mew.Core.Tasks.TaskWithPriority.html",
    "title": "Class TaskWithPriority | MewCore",
    "keywords": "Class TaskWithPriority Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskWithPriority Inheritance object TaskWithPriority Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskWithPriority(TaskAction, int) public TaskWithPriority(TaskAction func, int priority) Parameters func TaskAction priority int Properties Func public TaskAction Func { get; } Property Value TaskAction Priority public int Priority { get; } Property Value int"
  },
  "api/Mew.Core.Tasks.html": {
    "href": "api/Mew.Core.Tasks.html",
    "title": "Namespace Mew.Core.Tasks | MewCore",
    "keywords": "Namespace Mew.Core.Tasks Classes TaskInterval TaskInterval<T> TaskQueue TaskQueue<T> TaskQueue for specific loop. TaskWithPriority Enums IntervalTimerType LagProcessType TaskQueueLimitType Delegates TaskAction"
  },
  "api/Mew.Core.Tests.TaskIntervalBehaviourTest.html": {
    "href": "api/Mew.Core.Tests.TaskIntervalBehaviourTest.html",
    "title": "Class TaskIntervalBehaviourTest | MewCore",
    "keywords": "Class TaskIntervalBehaviourTest Namespace Mew.Core.Tests Assembly Assembly-CSharp.dll public class TaskIntervalBehaviourTest : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TaskIntervalBehaviourTest Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.Tests.TaskIntervalPlayModeTest.html": {
    "href": "api/Mew.Core.Tests.TaskIntervalPlayModeTest.html",
    "title": "Class TaskIntervalPlayModeTest | MewCore",
    "keywords": "Class TaskIntervalPlayModeTest Namespace Mew.Core.Tests Assembly Mew.Core.Editor.Tests.dll public class TaskIntervalPlayModeTest Inheritance object TaskIntervalPlayModeTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BasicTest() [UnityTest] public IEnumerator BasicTest() Returns IEnumerator FixedUpdateTest() [UnityTest] public IEnumerator FixedUpdateTest() Returns IEnumerator SkipTaskWhenFloodTest() [UnityTest] public IEnumerator SkipTaskWhenFloodTest() Returns IEnumerator"
  },
  "api/Mew.Core.Tests.TaskQueueBehaviourTest.html": {
    "href": "api/Mew.Core.Tests.TaskQueueBehaviourTest.html",
    "title": "Class TaskQueueBehaviourTest | MewCore",
    "keywords": "Class TaskQueueBehaviourTest Namespace Mew.Core.Tests Assembly Assembly-CSharp.dll public class TaskQueueBehaviourTest : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TaskQueueBehaviourTest Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.Tests.TaskQueuePlayModeTest.html": {
    "href": "api/Mew.Core.Tests.TaskQueuePlayModeTest.html",
    "title": "Class TaskQueuePlayModeTest | MewCore",
    "keywords": "Class TaskQueuePlayModeTest Namespace Mew.Core.Tests Assembly Mew.Core.Editor.Tests.dll public class TaskQueuePlayModeTest Inheritance object TaskQueuePlayModeTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DiscardHighPriorityTest() [UnityTest] public IEnumerator DiscardHighPriorityTest() Returns IEnumerator DiscardLowPriorityTest() [UnityTest] public IEnumerator DiscardLowPriorityTest() Returns IEnumerator DiscardTest() [UnityTest] public IEnumerator DiscardTest() Returns IEnumerator DisposeByCancellationTokenTest() [UnityTest] public IEnumerator DisposeByCancellationTokenTest() Returns IEnumerator DisposeTest() [UnityTest] public IEnumerator DisposeTest() Returns IEnumerator SwapLastHighPriorityTest() [UnityTest] public IEnumerator SwapLastHighPriorityTest() Returns IEnumerator SwapLastLowPriorityTest() [UnityTest] public IEnumerator SwapLastLowPriorityTest() Returns IEnumerator SwapLastTest() [UnityTest] public IEnumerator SwapLastTest() Returns IEnumerator"
  },
  "api/Mew.Core.Tests.html": {
    "href": "api/Mew.Core.Tests.html",
    "title": "Namespace Mew.Core.Tests | MewCore",
    "keywords": "Namespace Mew.Core.Tests Classes TaskIntervalBehaviourTest TaskIntervalPlayModeTest TaskQueueBehaviourTest TaskQueuePlayModeTest"
  },
  "api/Mew.Core.html": {
    "href": "api/Mew.Core.html",
    "title": "Namespace Mew.Core | MewCore",
    "keywords": "Namespace Mew.Core Classes MewLoop MewLoopDelegateCollection MewLoopUnityInitializer Structs MewManualUpdate MewUnityEarlyUpdate MewUnityFixedUpdate MewUnityPostLateUpdate MewUnityPreLateUpdate MewUnityPreUpdate MewUnityUpdate Delegates MewLoopDelegateCollection.UpdateFunction"
  },
  "docs/task-interval.html": {
    "href": "docs/task-interval.html",
    "title": "TaskInterval | MewCore",
    "keywords": "TaskInterval TaskInterval is a library that facilitates the execution of specific processes at regular intervals in Unity development. This library allows for periodic execution of asynchronous functions and prevents multiple asynchronous processes from running concurrently. Main Features Regular Execution of Asynchronous Functions: Automatically executes asynchronous functions at specified intervals, making it easier to manage tasks that include asynchronous processes. Flexible Response to Processing Time: If the execution of an asynchronous function takes longer than the specified interval, it can either skip the process or continue executing it delayed. This differs from typical periodic execution and adapts better to real-time operating environments. Prevention of Concurrent Execution: Only one asynchronous process is executed at a time, preventing multiple processes from running simultaneously. This makes task execution predictable and safe. Stable Interval Execution: If synchronous functions are used, it is also possible to execute functions at stable intervals. Use Scenarios Regular Updates Within the Game: Used for regularly updating the state of the game or objects at set intervals. Background Processes: Suitable for regular background processes such as network communication and data loading. Regular UI Updates: Can also be used for regularly updating user interface elements. Using TaskInterval makes the implementation of regular processes in Unity development more flexible and efficient, and prevents issues due to concurrent execution. Sample Code public class Sample : MonoBahaviour { private void Awake() { // Create a TaskInterval that executes TestTaskAsync every second. // Passing destroyCancellationToken will automatically stop the process and dispose of it when the MonoBehaviour is destroyed. TaskInterval .Create(TimeSpan.FromSeconds(1), TestTaskAsync) .Start(destroyCancellationToken); } private float time; private async Task TestTaskAsync(CancellationToken ct) { var currentTime = Time.time; Debug.Log($\"{currentTime - time}\"); time = currentTime; await Task.Delay(100, ct); } } Execution Result 0.9996152 1.000825 1.000599 0.9999266 1.000448 0.9925194 ... Specifying Timer Type You can change the timer used by specifying the type of timer as the third argument in Create. Timer Type Description IntervalTimerType.SystemTime Uses system time. IntervalTimerType.UnityTime Uses Unity's Time.time. IntervalTimerType.UnityUnscaledTime Time.unscaledTime. Example of executing a process unaffected by Time.timeScale. TaskInterval .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken); Specifying PlayerLoop You can specify the PlayerLoop timing for processing tasks. The following timing types are defined. Timing Description MewUnityEarlyUpdate Called at the beginning of Unity's frame update. At this stage, initial event processing and input updates occur. MewUnityFixedUpdate The timing for physics updates. Corresponds to fixed-frame-rate processing in Unity Engine. MewUnityPreUpdate Processing executed before the Update method. Includes scene state updates and animation updates. MewUnityUpdate The normal Update method timing, mainly used for updating game logic. MewUnityPreLateUpdate Processing executed before LateUpdate. Some post-processing for cameras and animations may occur. MewUnityPostLateUpdate Processing at the end of the frame, including rendering preparation and final camera updates. To specify PlayerLoop timing, specify the timing type for TaskInterval. For example, specifying MewUnityFixedUpdate can ensure stable game-time task execution even in case of frame skips, preventing delays. TaskInterval<MewUnityFixedUpdate> .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken);"
  },
  "docs/task-queue.html": {
    "href": "docs/task-queue.html",
    "title": "TaskQueue | MewCore",
    "keywords": "TaskQueue TaskQueue is a library that simplifies and efficiently handles asynchronous processes in Unity development. This library enables the management of dynamically changing asynchronous functions and the determination of execution order based on priority. Main Features Dynamic Function Addition: Allows adding asynchronous functions to the task queue at runtime. This enables flexible response to changing requirements and situations. Priority-Based Execution Management: Sets priorities for each asynchronous function and processes important tasks preferentially. This prevents delays in critical processes. Serial Processing and Safety: Executes multiple asynchronous functions in order, waiting for one function to complete before starting the next. This improves safety in UI updates and game sequencing. Simple Description: TaskQueue is designed to simplify the description of executing asynchronous functions. Use Scenarios Dynamic UI Updates: Used for smooth control of dynamic display and hiding of dialog boxes and menus in the game. Game Event Sequencing: Suitable for managing ordered events such as story progression and tutorials. Command Pattern Adaptation: Suitable for implementing the command pattern, including asynchronous processes. UI Event Handling: Used to prevent concurrent execution in response to asynchronous UI events such as clicks. Sample Code class Sample : Monobehaviour { void Start() { // Create an instance of TaskQueue. var taskQueue = new TaskQueue(); // Start executing TaskQueue. // Passing destroyCancellationToken will automatically stop the process and dispose of it when the MonoBehaviour is destroyed. taskQueue.Start(destroyCancellationToken); // Add asynchronous functions to TaskQueue. taskQueue.Enqueue(async cancellationToken => { Debug.Log(\"Hello\"); await Task.Delay(1000, cancellationToken); }); taskQueue.Enqueue(async cancellationToken => { await Task.Delay(1000, cancellationToken); Debug.Log(\"Bye\"); }); } } Execution Result Hello // 2sec later Bye Executing Priority Tasks You can execute priority tasks by specifying the priority as the second argument in Enqueue. The higher the number, the more prioritized the processing. The default value is 0. taskQueue.Enqueue(async ct => { ... }, priority: 1); Specifying PlayerLoop You can specify the PlayerLoop timing for processing the queue. The following timing types are defined. Timing Description MewUnityEarlyUpdate Called at the beginning of Unity's frame update. At this stage, initial event processing and input updates occur. MewUnityFixedUpdate The timing for physics updates. Corresponds to fixed-frame-rate processing in Unity Engine. MewUnityPreUpdate Processing executed before the Update method. Includes scene state updates and animation updates. MewUnityUpdate The normal Update method timing, mainly used for updating game logic. MewUnityPreLateUpdate Processing executed before LateUpdate. Some post-processing for cameras and animations may occur. MewUnityPostLateUpdate Processing at the end of the frame, including rendering preparation and final camera updates. To specify PlayerLoop timing, specify the timing type in the constructor. For example, specifying MewUnityFixedUpdate can prevent queue processing delays in case of frame skips. var fixedUpdateTaskQueue = new TaskQueue<MewUnityFixedUpdate>();"
  },
  "index.html": {
    "href": "index.html",
    "title": "MewCore | MewCore",
    "keywords": "MewCore Core Game Libraries for Unity Installation It can be installed via UPM. Please specify the following git URL. git@github.com:mewlist/MewCore.git TaskQueue TaskQueue is a library that simplifies and efficiently handles asynchronous processes in Unity development. This library enables the management of dynamically changing asynchronous functions and the determination of execution order based on priority. TaskInterval TaskInterval is a library that facilitates the execution of specific processes at regular intervals in Unity development. This library allows for periodic execution of asynchronous functions and prevents multiple asynchronous processes from running concurrently."
  }
}