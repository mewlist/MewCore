{
  "api/Mew.Core.MewLoop.html": {
    "href": "api/Mew.Core.MewLoop.html",
    "title": "Class MewLoop | MewCore",
    "keywords": "Class MewLoop Namespace Mew.Core Assembly Mew.Core.dll public class MewLoop Inheritance object MewLoop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(UpdateFunction) Add update callback function to default delegate collection. Default delegate collection is set through SetDefaultCollection(). public static void Add(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions NullReferenceException Add(string, UpdateFunction) Add update callback function to delegate collection for id. public static void Add(string id, MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters id string updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions KeyNotFoundException Add<T>(UpdateFunction) Add update callback function to delegate collection for type T. public static void Add<T>(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Type Parameters T LoopId<T>() public static string LoopId<T>() Returns string Type Parameters T Register(string, MewLoopDelegateCollection) Register delegate collection for id. public static void Register(string id, MewLoopDelegateCollection delegateCollection) Parameters id string delegateCollection MewLoopDelegateCollection Register<T>(MewLoopDelegateCollection) Register delegate collection for type T. public static void Register<T>(MewLoopDelegateCollection delegateCollection) Parameters delegateCollection MewLoopDelegateCollection Type Parameters T Remove(UpdateFunction) Remove update callback function from default delegate collection. public static void Remove(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions NullReferenceException Remove(string, UpdateFunction) Remove update callback function from delegate collection for id. public static void Remove(string id, MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters id string updateFunction MewLoopDelegateCollection.UpdateFunction Exceptions KeyNotFoundException Remove<T>(UpdateFunction) Remove update callback function from delegate collection for type T. public static void Remove<T>(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Type Parameters T SetDefaultCollection(string?) Set default delegate collection id. public static void SetDefaultCollection(string? id) Parameters id string SetDefaultCollection<T>() Set default delegate collection id as T. public static void SetDefaultCollection<T>() Type Parameters T Update() Invoke update callback functions in default delegate collection. public static void Update() Exceptions NullReferenceException Update(string) Invoke update callback functions in delegate collection for id. public static void Update(string id) Parameters id string Exceptions KeyNotFoundException Update<T>() Invoke update callback functions in delegate collection for type T. public static void Update<T>() Type Parameters T"
  },
  "api/Mew.Core.MewLoopDelegateCollection.UpdateFunction.html": {
    "href": "api/Mew.Core.MewLoopDelegateCollection.UpdateFunction.html",
    "title": "Delegate MewLoopDelegateCollection.UpdateFunction | MewCore",
    "keywords": "Delegate MewLoopDelegateCollection.UpdateFunction Namespace Mew.Core Assembly Mew.Core.dll public delegate void MewLoopDelegateCollection.UpdateFunction()"
  },
  "api/Mew.Core.MewLoopDelegateCollection.html": {
    "href": "api/Mew.Core.MewLoopDelegateCollection.html",
    "title": "Class MewLoopDelegateCollection | MewCore",
    "keywords": "Class MewLoopDelegateCollection Namespace Mew.Core Assembly Mew.Core.dll public class MewLoopDelegateCollection Inheritance object MewLoopDelegateCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(UpdateFunction) public void Add(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Invoke() public void Invoke() Remove(UpdateFunction) public void Remove(MewLoopDelegateCollection.UpdateFunction updateFunction) Parameters updateFunction MewLoopDelegateCollection.UpdateFunction Operators operator +(MewLoopDelegateCollection, UpdateFunction) public static MewLoopDelegateCollection operator +(MewLoopDelegateCollection collection, MewLoopDelegateCollection.UpdateFunction func) Parameters collection MewLoopDelegateCollection func MewLoopDelegateCollection.UpdateFunction Returns MewLoopDelegateCollection operator -(MewLoopDelegateCollection, UpdateFunction) public static MewLoopDelegateCollection operator -(MewLoopDelegateCollection collection, MewLoopDelegateCollection.UpdateFunction func) Parameters collection MewLoopDelegateCollection func MewLoopDelegateCollection.UpdateFunction Returns MewLoopDelegateCollection"
  },
  "api/Mew.Core.MewLoopUnityInitializer.html": {
    "href": "api/Mew.Core.MewLoopUnityInitializer.html",
    "title": "Class MewLoopUnityInitializer | MewCore",
    "keywords": "Class MewLoopUnityInitializer Namespace Mew.Core Assembly Mew.Core.dll public static class MewLoopUnityInitializer Inheritance object MewLoopUnityInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Mew.Core.MewManualUpdate.html": {
    "href": "api/Mew.Core.MewManualUpdate.html",
    "title": "Struct MewManualUpdate | MewCore",
    "keywords": "Struct MewManualUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewManualUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityEarlyUpdate.html": {
    "href": "api/Mew.Core.MewUnityEarlyUpdate.html",
    "title": "Struct MewUnityEarlyUpdate | MewCore",
    "keywords": "Struct MewUnityEarlyUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityEarlyUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityFixedUpdate.html": {
    "href": "api/Mew.Core.MewUnityFixedUpdate.html",
    "title": "Struct MewUnityFixedUpdate | MewCore",
    "keywords": "Struct MewUnityFixedUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityFixedUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPostLateUpdate.html": {
    "href": "api/Mew.Core.MewUnityPostLateUpdate.html",
    "title": "Struct MewUnityPostLateUpdate | MewCore",
    "keywords": "Struct MewUnityPostLateUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPostLateUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPreLateUpdate.html": {
    "href": "api/Mew.Core.MewUnityPreLateUpdate.html",
    "title": "Struct MewUnityPreLateUpdate | MewCore",
    "keywords": "Struct MewUnityPreLateUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPreLateUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityPreUpdate.html": {
    "href": "api/Mew.Core.MewUnityPreUpdate.html",
    "title": "Struct MewUnityPreUpdate | MewCore",
    "keywords": "Struct MewUnityPreUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityPreUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.MewUnityUpdate.html": {
    "href": "api/Mew.Core.MewUnityUpdate.html",
    "title": "Struct MewUnityUpdate | MewCore",
    "keywords": "Struct MewUnityUpdate Namespace Mew.Core Assembly Mew.Core.dll public struct MewUnityUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Mew.Core.Tasks.IntervalTimerType.html": {
    "href": "api/Mew.Core.Tasks.IntervalTimerType.html",
    "title": "Enum IntervalTimerType | MewCore",
    "keywords": "Enum IntervalTimerType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum IntervalTimerType Fields ManualUpdate = 3 SystemTime = 0 UnityTime = 1 UnityUnscaledTime = 2"
  },
  "api/Mew.Core.Tasks.LagProcessType.html": {
    "href": "api/Mew.Core.Tasks.LagProcessType.html",
    "title": "Enum LagProcessType | MewCore",
    "keywords": "Enum LagProcessType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum LagProcessType Fields Flood = 1 Skip = 0"
  },
  "api/Mew.Core.Tasks.TaskAction.html": {
    "href": "api/Mew.Core.Tasks.TaskAction.html",
    "title": "Delegate TaskAction | MewCore",
    "keywords": "Delegate TaskAction Namespace Mew.Core.Tasks Assembly Mew.Core.dll public delegate Task TaskAction(CancellationToken ct) Parameters ct CancellationToken Returns Task"
  },
  "api/Mew.Core.Tasks.TaskInterval-1.html": {
    "href": "api/Mew.Core.Tasks.TaskInterval-1.html",
    "title": "Class TaskInterval<T> | MewCore",
    "keywords": "Class TaskInterval<T> Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskInterval<T> : TaskInterval, IDisposable Type Parameters T Inheritance object TaskInterval TaskInterval<T> Implements IDisposable Inherited Members TaskInterval.IntervalTimerType TaskInterval.LagProcessType TaskInterval.Interval TaskInterval.LoopId TaskInterval.Start(CancellationToken?) TaskInterval.Tick(float) TaskInterval.OnException(Action<Exception>) TaskInterval.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval"
  },
  "api/Mew.Core.Tasks.TaskInterval.html": {
    "href": "api/Mew.Core.Tasks.TaskInterval.html",
    "title": "Class TaskInterval | MewCore",
    "keywords": "Class TaskInterval Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskInterval : IDisposable Inheritance object TaskInterval Implements IDisposable Derived TaskInterval<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskInterval(TimeSpan, TaskAction, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string TaskInterval(TimeSpan, Action, IntervalTimerType, LagProcessType, string) protected TaskInterval(TimeSpan interval, Action action, IntervalTimerType intervalTimerType, LagProcessType lagProcessType, string loopId) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType loopId string Properties Interval public TimeSpan Interval { get; } Property Value TimeSpan IntervalTimerType public IntervalTimerType IntervalTimerType { get; } Property Value IntervalTimerType LagProcessType public LagProcessType LagProcessType { get; } Property Value LagProcessType LoopId public string LoopId { get; } Property Value string Methods Create(double, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(double, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(double intervalMs, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters intervalMs double action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, TaskAction, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, TaskAction action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action TaskAction intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Create(TimeSpan, Action, IntervalTimerType, LagProcessType) Create TaskInterval. public static TaskInterval Create(TimeSpan interval, Action action, IntervalTimerType intervalTimerType = IntervalTimerType.UnityTime, LagProcessType lagProcessType = LagProcessType.Skip) Parameters interval TimeSpan action Action intervalTimerType IntervalTimerType lagProcessType LagProcessType Returns TaskInterval Dispose() public void Dispose() OnException(Action<Exception>) public TaskInterval OnException(Action<Exception> action) Parameters action Action<Exception> Returns TaskInterval Start(CancellationToken?) Run action every interval. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskInterval when ct is cancelled. Exceptions ObjectDisposedException Tick(float) Progress timer manually. public void Tick(float elapsedTime) Parameters elapsedTime float Exceptions ObjectDisposedException"
  },
  "api/Mew.Core.Tasks.TaskQueue-1.html": {
    "href": "api/Mew.Core.Tasks.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | MewCore",
    "keywords": "Class TaskQueue<T> Namespace Mew.Core.Tasks Assembly Mew.Core.dll TaskQueue for specific loop. public class TaskQueue<T> : TaskQueue, IDisposable Type Parameters T Loop Timing Type Inheritance object TaskQueue TaskQueue<T> Implements IDisposable Inherited Members TaskQueue.loopId TaskQueue.LimitType TaskQueue.MaxSize TaskQueue.Count TaskQueue.Started TaskQueue.Disposed TaskQueue.Start(CancellationToken?) TaskQueue.Enqueue(TaskAction, int) TaskQueue.EnqueueAsync(TaskAction, int) TaskQueue.Dispose() TaskQueue.Any() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue() public TaskQueue() TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType, int maxSize) Parameters taskQueueLimitType TaskQueueLimitType maxSize int"
  },
  "api/Mew.Core.Tasks.TaskQueue.html": {
    "href": "api/Mew.Core.Tasks.TaskQueue.html",
    "title": "Class TaskQueue | MewCore",
    "keywords": "Class TaskQueue Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskQueue : IDisposable Inheritance object TaskQueue Implements IDisposable Derived TaskQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue(TaskQueueLimitType, int) public TaskQueue(TaskQueueLimitType taskQueueLimitType = TaskQueueLimitType.None, int maxSize = 0) Parameters taskQueueLimitType TaskQueueLimitType maxSize int Fields loopId protected string loopId Field Value string Properties Count Count of running or waiting tasks. public int Count { get; } Property Value int Disposed true if disposed. public bool Disposed { get; } Property Value bool LimitType public TaskQueueLimitType LimitType { get; } Property Value TaskQueueLimitType MaxSize Max size of queue. public int MaxSize { get; } Property Value int Started true if started. public bool Started { get; } Property Value bool Methods Any() public bool Any() Returns bool Dispose() public void Dispose() Enqueue(TaskAction, int) Enqueue task. public void Enqueue(TaskAction func, int priority = 0) Parameters func TaskAction priority int Low number is prior. default is 0 Exceptions ObjectDisposedException InvalidOperationException ArgumentOutOfRangeException EnqueueAsync(TaskAction, int) Enqueue task. public TaskQueueAwaitable EnqueueAsync(TaskAction func, int priority = 0) Parameters func TaskAction priority int Low number is prior. default is 0 Returns TaskQueueAwaitable Exceptions ObjectDisposedException InvalidOperationException ArgumentOutOfRangeException Start(CancellationToken?) Start TaskQueue. public void Start(CancellationToken? ct = null) Parameters ct CancellationToken? Dispose TaskQueue when ct is cancelled. Exceptions ObjectDisposedException"
  },
  "api/Mew.Core.Tasks.TaskQueueAwaitable.html": {
    "href": "api/Mew.Core.Tasks.TaskQueueAwaitable.html",
    "title": "Class TaskQueueAwaitable | MewCore",
    "keywords": "Class TaskQueueAwaitable Namespace Mew.Core.Tasks Assembly Mew.Core.dll public class TaskQueueAwaitable Inheritance object TaskQueueAwaitable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueueAwaitable(TaskAction, int) public TaskQueueAwaitable(TaskAction func, int priority) Parameters func TaskAction priority int Properties Priority public int Priority { get; } Property Value int Methods Cancel() public void Cancel() GetAwaiter() public TaskAwaiter<bool> GetAwaiter() Returns TaskAwaiter<bool> Invoke(CancellationToken) public Task Invoke(CancellationToken ct) Parameters ct CancellationToken Returns Task OnException(Action<Exception>) public TaskQueueAwaitable OnException(Action<Exception> action) Parameters action Action<Exception> Returns TaskQueueAwaitable ToEnumerator() public IEnumerator ToEnumerator() Returns IEnumerator Operators implicit operator Task(TaskQueueAwaitable) public static implicit operator Task(TaskQueueAwaitable awaitable) Parameters awaitable TaskQueueAwaitable Returns Task"
  },
  "api/Mew.Core.Tasks.TaskQueueLimitType.html": {
    "href": "api/Mew.Core.Tasks.TaskQueueLimitType.html",
    "title": "Enum TaskQueueLimitType | MewCore",
    "keywords": "Enum TaskQueueLimitType Namespace Mew.Core.Tasks Assembly Mew.Core.dll public enum TaskQueueLimitType Fields Discard = 2 Keep queue and discard new task. None = 0 SwapLast = 1 Discard last less-or-equal priority task. Then enqueue. If all tasks have higher priority, discard new task."
  },
  "api/Mew.Core.Tasks.html": {
    "href": "api/Mew.Core.Tasks.html",
    "title": "Namespace Mew.Core.Tasks | MewCore",
    "keywords": "Namespace Mew.Core.Tasks Classes TaskInterval TaskInterval<T> TaskQueue TaskQueueAwaitable TaskQueue<T> TaskQueue for specific loop. Enums IntervalTimerType LagProcessType TaskQueueLimitType Delegates TaskAction"
  },
  "api/Mew.Core.html": {
    "href": "api/Mew.Core.html",
    "title": "Namespace Mew.Core | MewCore",
    "keywords": "Namespace Mew.Core Classes MewLoop MewLoopDelegateCollection MewLoopUnityInitializer Structs MewManualUpdate MewUnityEarlyUpdate MewUnityFixedUpdate MewUnityPostLateUpdate MewUnityPreLateUpdate MewUnityPreUpdate MewUnityUpdate Delegates MewLoopDelegateCollection.UpdateFunction"
  },
  "en/TaskInterval/exception.html": {
    "href": "en/TaskInterval/exception.html",
    "title": "Exception Handling | MewCore",
    "keywords": "Exception Handling To handle exceptions that occur during task execution, call the OnException method and register an exception callback. TaskInterval .Create(1000, async ct => { await Task.Delay(100, ct); throw new Exception(); }) .OnException(e => Debug.Log(e)) .Start(destroyCancellationToken);"
  },
  "en/TaskInterval/index.html": {
    "href": "en/TaskInterval/index.html",
    "title": "TaskInterval | MewCore",
    "keywords": "TaskInterval TaskInterval is a library that facilitates the execution of specific processes at regular intervals in Unity development. This library allows for periodic execution of asynchronous functions and prevents multiple asynchronous processes from running concurrently. Main Features Regular Execution of Asynchronous Functions: Automatically executes asynchronous functions at specified intervals, making it easier to manage tasks that include asynchronous processes. Flexible Response to Processing Time: If the execution of an asynchronous function takes longer than the specified interval, it can either skip the process or continue executing it delayed. This differs from typical periodic execution and adapts better to real-time operating environments. Prevention of Concurrent Execution: Only one asynchronous process is executed at a time, preventing multiple processes from running simultaneously. This makes task execution predictable and safe. Stable Interval Execution: If synchronous functions are used, it is also possible to execute functions at stable intervals. Use Scenarios Regular Updates Within the Game: Used for regularly updating the state of the game or objects at set intervals. Background Processes: Suitable for regular background processes such as network communication and data loading. Regular UI Updates: Can also be used for regularly updating user interface elements. Using TaskInterval makes the implementation of regular processes in Unity development more flexible and efficient, and prevents issues due to concurrent execution. Sample Code public class Sample : MonoBahaviour { private void Awake() { // Create a TaskInterval that executes TestTaskAsync every second. // Passing destroyCancellationToken will automatically stop the process and dispose of it when the MonoBehaviour is destroyed. TaskInterval .Create(TimeSpan.FromSeconds(1), TestTaskAsync) .Start(destroyCancellationToken); } private float time; private async Task TestTaskAsync(CancellationToken ct) { var currentTime = Time.time; Debug.Log($\"{currentTime - time}\"); time = currentTime; await Task.Delay(100, ct); } } Execution Result 0.9996152 1.000825 1.000599 0.9999266 1.000448 0.9925194 ... Specifying Timer Type You can change the timer used by specifying the type of timer as the third argument in Create. Timer Type Description IntervalTimerType.SystemTime Uses system time. IntervalTimerType.UnityTime Uses Unity's Time.time. IntervalTimerType.UnityUnscaledTime Time.unscaledTime. Example of executing a process unaffected by Time.timeScale. TaskInterval .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken);"
  },
  "en/TaskInterval/player-loop.html": {
    "href": "en/TaskInterval/player-loop.html",
    "title": "Specifying PlayerLoop | MewCore",
    "keywords": "Specifying PlayerLoop You can specify the PlayerLoop timing for processing tasks. The following timing types are defined. Timing Description MewUnityEarlyUpdate Called at the beginning of Unity's frame update. At this stage, initial event processing and input updates occur. MewUnityFixedUpdate The timing for physics updates. Corresponds to fixed-frame-rate processing in Unity Engine. MewUnityPreUpdate Processing executed before the Update method. Includes scene state updates and animation updates. MewUnityUpdate The normal Update method timing, mainly used for updating game logic. MewUnityPreLateUpdate Processing executed before LateUpdate. Some post-processing for cameras and animations may occur. MewUnityPostLateUpdate Processing at the end of the frame, including rendering preparation and final camera updates. To specify PlayerLoop timing, specify the timing type for TaskInterval. For example, specifying MewUnityFixedUpdate can ensure stable game-time task execution even in case of frame skips, preventing delays. TaskInterval<MewUnityFixedUpdate> .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken);"
  },
  "en/TaskQueue/awaitable.html": {
    "href": "en/TaskQueue/awaitable.html",
    "title": "Waiting for the Completion of a Specific Task | MewCore",
    "keywords": "Waiting for the Completion of a Specific Task In TaskQueue, the EnqueueAsync method is provided to wait for the completion of tasks added as an alternative to the Enqueue method. This feature allows the calling process to be temporarily suspended while the task is being completed and then resume processing after the task is completed. await taskQueue.EnqueueAsync(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); You can queue multiple processes and wait for the completion of a specific task. This is particularly useful when the code to queue tasks is dispersed across multiple locations. It allows you to wait only for the tasks of interest while maintaining safe execution processes via the queue. taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); var awaitable = taskQueue.EnqueueAsync(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(1f), ct)); // Although there are still tasks in the queue, // the processing will resume as soon as the third task is completed await awaitable;"
  },
  "en/TaskQueue/exception.html": {
    "href": "en/TaskQueue/exception.html",
    "title": "Exception Handling | MewCore",
    "keywords": "Exception Handling Tasks that throw exceptions during execution are removed from the queue, and the next task is executed. If you want to catch exceptions from a specific task, use the ExecuteAsync method to register the task in the queue and specify the OnException callback. taskQueue .EnqueueAsync(async ct => { await Task.Delay(TimeSpan.FromSeconds(1), ct); throw new Exception(); }) .OnException(e => Debug.LogException(e)); Additionally, within the asynchronous function, you can also catch exceptions by awaiting the tasks queued in the queue. try { await taskQueue .EnqueueAsync(async ct => { await Task.Delay(TimeSpan.FromSeconds(1), ct); throw new Exception(); }); } catch (Exception e) { Debug.Log($\"catch {e}\"); }"
  },
  "en/TaskQueue/index.html": {
    "href": "en/TaskQueue/index.html",
    "title": "TaskQueue | MewCore",
    "keywords": "TaskQueue TaskQueue is a library for handling serial processing of asynchronous functions in Unity development. Asynchronous functions are executed in the order they are input into the queue. It also has the feature of a priority queue, which allows you to prioritize important tasks. Main Features Dynamic Function Addition: You can add asynchronous functions to the task queue at runtime. This allows you to flexibly respond to changing requirements and situations. Execution management based on priority: You can set a priority for each asynchronous function and process important tasks preferentially. This prevents delays in important processing. Serial processing and safety: Multiple asynchronous functions are executed in order and wait for the completion of one function before starting the execution of the next. This improves the safety of UI updates and game sequences. Maximum size of the queue: You can set the maximum number of tasks that can be input into the queue. This allows you to prevent tasks from building up in the queue. Use Scenarios Dynamic UI Updates: Used for smooth control of dynamic display and hiding of dialog boxes and menus in the game. Game Event Sequencing: Suitable for managing ordered events such as story progression and tutorials. Command Pattern Adaptation: Suitable for implementing the command pattern, including asynchronous processes. UI Event Handling: Used to prevent concurrent execution in response to asynchronous UI events such as clicks. Sample Code class Sample : Monobehaviour { void Start() { var taskQueue = new TaskQueue(); // By passing the destroyCancellationToken, processing is automatically stoppped and disposed when MonoBehaviour is destroyed. taskQueue.Start(destroyCancellationToken); // Add an asynchronous function to TaskQueue. taskQueue.Enqueue(async cancellationToken => { Debug.Log(\"Hello\"); await Task.Delay(1000, cancellationToken); }); taskQueue.Enqueue(async cancellationToken => { await Task.Delay(1000, cancellationToken); Debug.Log(\"Bye\"); }); } } Execution Result Hello // 2sec later Bye Executing Priority Tasks You can execute priority tasks by specifying the priority as the second argument to Enqueue. The processing with a smaller priority value is prioritized. The default value is 0. taskQueue.Enqueue(async ct => { ... }, priority: 1); taskQueue.Enqueue(async ct => { ... }, priority: 0); // This task is processed first Setting the Maximum Queue Size TaskQueueLimitType.Discard If you add tasks to a queue with a maximum size of 2 as follows, and exceed the maximum number, the last added task is discarded. If the priority of the task to be added is higher, the task with a lower priority is discarded and queued. taskQueue = new TaskQueue(TaskQueueLimitType.Discard, maxSize: 2); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); // This task is discarded TaskQueueLimitType.SwapLast If you add tasks to a queue with a maximum size of 2 as follows, and exceed the maximum number, the last task is replaced. If the queue is made up of tasks that have a higher priority than the task to be added, no replacement will be made. taskQueue = new TaskQueue(TaskQueueLimitType.SwapLast, maxSize: 2); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); // This task is discarded taskQueue.Enqueue(async ct => { ... });"
  },
  "en/TaskQueue/player-loop.html": {
    "href": "en/TaskQueue/player-loop.html",
    "title": "Specifying PlayerLoop | MewCore",
    "keywords": "Specifying PlayerLoop You can specify the PlayerLoop timing for processing the queue. The following timing types are defined. Timing Description MewUnityEarlyUpdate Called at the beginning of Unity's frame update. At this stage, initial event processing and input updates occur. MewUnityFixedUpdate The timing for physics updates. Corresponds to fixed-frame-rate processing in Unity Engine. MewUnityPreUpdate Processing executed before the Update method. Includes scene state updates and animation updates. MewUnityUpdate The normal Update method timing, mainly used for updating game logic. MewUnityPreLateUpdate Processing executed before LateUpdate. Some post-processing for cameras and animations may occur. MewUnityPostLateUpdate Processing at the end of the frame, including rendering preparation and final camera updates. To specify PlayerLoop timing, specify the timing type in the constructor. For example, specifying MewUnityFixedUpdate can prevent queue processing delays in case of frame skips. var fixedUpdateTaskQueue = new TaskQueue<MewUnityFixedUpdate>();"
  },
  "en/index.html": {
    "href": "en/index.html",
    "title": "Installation | MewCore",
    "keywords": "Installation It can be installed via UPM. Please specify the following git URL. git@github.com:mewlist/MewCore.git"
  },
  "index.html": {
    "href": "index.html",
    "title": "MewCore | MewCore",
    "keywords": "MewCore Core Game Libraries for Unity Document 日本語 English"
  },
  "ja/TaskInterval/exception.html": {
    "href": "ja/TaskInterval/exception.html",
    "title": "例外のハンドリング | MewCore",
    "keywords": "例外のハンドリング タスクの実行中に発生した例外をハンドリングするには、OnException メソッドを呼び出して例外コールバックを登録します。 TaskInterval .Create(1000, async ct => { await Task.Delay(100, ct); throw new Exception(); }) .OnException(e => Debug.Log(e)) .Start(destroyCancellationToken);"
  },
  "ja/TaskInterval/index.html": {
    "href": "ja/TaskInterval/index.html",
    "title": "TaskInterval | MewCore",
    "keywords": "TaskInterval TaskInterval は、Unity 開発で一定間隔による特定の処理の実行を容易にするライブラリです。このライブラリは、非同期関数を定期的に実行し、複数の非同期処理が並行して実行されることを防ぎます。 主な特徴 非同期関数の定期実行: 指定された間隔ごとに非同期関数を自動的に実行します。これにより、非同期処理を含むタスクの管理が容易になります。 処理時間への柔軟な対応: 非同期関数の実行に時間がかかり、指定した間隔を超えた場合でも、処理をスキップするか、遅れても実行を継続することができます。これは一般的な定期実行処理とは異なり、よりリアルタイムの動作環境に適応します。 並行実行の防止: 一度に一つの非同期処理のみが実行され、複数の処理が同時に実行されることはありません。これにより、タスクの実行が予測可能で安全になります。 安定した間隔での実行: 同期関数を使用すれば、安定した間隔で関数を実行することも可能です。 使用シナリオ ゲーム内の定期的な更新: ゲームの状態やオブジェクトの状態を一定間隔で更新する際に利用します。 バックグラウンド処理: ネットワーク通信やデータの読み込みなど、バックグラウンドでの定期的な処理に適しています。 UIの定期的な更新: ユーザーインターフェースの要素を定期的に更新する際にも利用できます。 TaskInterval を使用することで、Unity 開発における定期的な処理の実装がより柔軟かつ効率的になり、並行実行による問題を防ぎます。 サンプルコード public class Sample : MonoBahaviour { private void Awake() { // 一秒ごとに TestTaskAsync を実行する TaskInterval を生成します。 // destroyCancellationToken を渡すことで // MonoBehaviour が破棄されたタイミングで自動的に処理を停止し Dispose されます。 TaskInterval .Create(TimeSpan.FromSeconds(1), TestTaskAsync) .Start(destroyCancellationToken); } private float time; private async Task TestTaskAsync(CancellationToken ct) { var currentTime = Time.time; Debug.Log($\"{currentTime - time}\"); time = currentTime; await Task.Delay(100, ct); } } 実行結果 0.9996152 1.000825 1.000599 0.9999266 1.000448 0.9925194 ... 使用する Timer の指定 Create の第３引数に Timer の種類を指定することで、使用する Timer を変更することができます。 Timer の種類 説明 IntervalTimerType.SystemTime システム時間を使用します。 IntervalTimerType.UnityTime Unity の Time.time を使用します。 IntervalTimerType.UnityUnscaledTime Time.unscaledTime を使用します。 Time.timeScale の影響を受けずに処理を実行する例。 TaskInterval .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken);"
  },
  "ja/TaskInterval/player-loop.html": {
    "href": "ja/TaskInterval/player-loop.html",
    "title": "PlayerLoop の指定 | MewCore",
    "keywords": "PlayerLoop の指定 タスクを処理する PlayerLoop のタイミングを指定することができます。 以下のタイミング型が定義されています。 タイミング 説明 MewUnityEarlyUpdate Unityのフレーム更新の最初の段階で呼ばれます。この時点で、最初のイベント処理や入力の更新が行われます。 MewUnityFixedUpdate 物理演算の更新が行われるタイミングです。Unityエンジンにおける固定フレームレートでの処理に対応します。 MewUnityPreUpdate Update メソッドの前に実行される処理です。シーンの状態更新やアニメーションの更新などが含まれます。 MewUnityUpdate 主にゲームロジックの更新に使用される、通常の Update メソッドのタイミングです。 MewUnityPreLateUpdate LateUpdate の前に実行される処理です。一部のカメラやアニメーションの後処理が行われる可能性があります。 MewUnityPostLateUpdate フレームの最後に実行される処理で、レンダリングの前準備やカメラの最終更新が含まれます。 PlayerLoop のタイミングを指定するには、TaskIntervalに対してタイミング型を指定します。 例えば MewUnityFixedUpdate を指定ることで、フレームスキップが発生した場合にも安定したゲーム時間でのタスク実行を行い遅延することを防くことができます。 TaskInterval<MewUnityFixedUpdate> .Create(1000 /* ms */, TestTaskAsync, IntervalTimerType.UnityUnscaledTime) .Start(destroyCancellationToken);"
  },
  "ja/TaskQueue/awaitable.html": {
    "href": "ja/TaskQueue/awaitable.html",
    "title": "特定のタスクの完了を待機する | MewCore",
    "keywords": "特定のタスクの完了を待機する TaskQueue では、Enqueue のかわりに EnqueueAsyncメソッドを使用して追加されたタスクの完了を待機する機能が提供されています。 この機能により、タスクが完了するまでの間、呼び出し側の処理を一時的に中断し、タスクの完了後に処理を再開することができます。 await taskQueue.EnqueueAsync(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); 複数の処理をキューに積んでおき、特定のタスクが完了するまで待機することができます。 特に、キューに対してタスクを積むコードが複数箇所に分散している場合、 キューによる安全な実行処理を維持しつつ、関心のあるタスクだけを待つことが可能です。 taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); // このタスクの完了を待ちたい var awaitable = taskQueue.EnqueueAsync(async ct => await Task.Delay(TimeSpan.FromSeconds(0.1f), ct)); taskQueue.Enqueue(async ct => await Task.Delay(TimeSpan.FromSeconds(1f), ct)); // キューにはタスクがまだ残っているが３番めのタスクが完了し次第、処理が再開される await awaitable;"
  },
  "ja/TaskQueue/exception.html": {
    "href": "ja/TaskQueue/exception.html",
    "title": "例外のハンドリング | MewCore",
    "keywords": "例外のハンドリング タスクの実行中に例外が発生したタスクはキューから削除され、次のタスクが実行されます。 特定のタスクの例外をキャッチしたい場合は、ExecuteAsyncメソッドを使用してキューを登録し、OnExceptiopn コールバックを指定してください。 taskQueue .EnqueueAsync(async ct => { await Task.Delay(TimeSpan.FromSeconds(1), ct); throw new Exception(); }) .OnException(e => Debug.LogException(e)); また、非同期関数内では、キューに積まれたタスクを await することでも例外をキャッチすることができます。 try { await taskQueue .EnqueueAsync(async ct => { await Task.Delay(TimeSpan.FromSeconds(1), ct); throw new Exception(); }); } catch (Exception e) { Debug.Log($\"catch {e}\"); }"
  },
  "ja/TaskQueue/index.html": {
    "href": "ja/TaskQueue/index.html",
    "title": "TaskQueue | MewCore",
    "keywords": "TaskQueue TaskQueue は Unity 開発における非同期関数の直列処理を行うためのライブラリです。 キューに入力した順で非同期関数が実行されます。 また、優先度付きキューの機能も備えており、重要なタスクを優先的に実行することができます。 主な特徴 動的な関数追加: ランタイムで非同期関数をタスクキューに追加することができます。これにより、変化する要件や状況に柔軟に対応可能です。 優先度に基づく実行管理: 各非同期関数に優先度を設定し、重要なタスクを優先的に処理します。これにより、重要な処理の遅延を防ぎます。 直列処理と安全性: 複数の非同期関数を順序立てて実行し、一つの関数が完了するまで次の関数の実行を待機します。これにより、UI 更新やゲームシーケンスの安全性が向上します。 キューの最大サイズ: キューに入力できるタスクの最大数を設定できます。これにより、キューにタスクが溜まりすぎることを防ぐことができます。 シンプルな記述: シンプルに記述できるように設計されています。 使用シナリオ UIの動的更新: ゲーム内でのダイアログボックスやメニューの動的な表示・非表示をスムーズに制御する際に使用します。 ゲームイベントのシーケンシング: 物語進行やチュートリアルなど、順序立てられたイベントの管理に適しています。 TaskQueue を使用することで、Unity 開発における非同期処理の複雑さを軽減し、より効果的かつ効率的なコード記述を可能にします。 コマンドパターンへの適応: 非同期処理を含めたコマンドパターンの実装に適しています。 UI イベントのハンドリング: クリックなど UI の非同期イベントに対して並列実行を防ぐために使用します。 サンプルコード class Sample : Monobehaviour { void Start() { var taskQueue = new TaskQueue(); // destroyCancellationToken を渡すことで // MonoBehaviour が破棄されたタイミングで自動的に処理を停止し Dispose されます。 taskQueue.Start(destroyCancellationToken); // TaskQueue に非同期関数を追加します。 taskQueue.Enqueue(async cancellationToken => { Debug.Log(\"Hello\"); await Task.Delay(1000, cancellationToken); }); taskQueue.Enqueue(async cancellationToken => { await Task.Delay(1000, cancellationToken); Debug.Log(\"Bye\"); }); } } 実行結果 Hello // 二秒後 Bye 優先度付きタスクの実行 Enqueue の第二引数に優先度を指定することで、優先度付きタスクを実行することができます。 priotiry値が小さい処理が優先されます。既定値は 0 です。 taskQueue.Enqueue(async ct => { ... }, priority: 1); taskQueue.Enqueue(async ct => { ... }, priority: 0); // このタスクが優先して処理される キュー最大サイズの設定 TaskQueueLimitType.Discard 最大サイズ 2 のキューに対して以下のようにタスクを追加し、最大数を超えた場合、最後に追加されたタスクが破棄されます。 追加されるタスクの優先度が高い場合は、より低い優先度のタスクが破棄されキューイングが行われます。 taskQueue = new TaskQueue(TaskQueueLimitType.Discard, maxSize: 2); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); // このタスクが破棄される TaskQueueLimitType.SwapLast 最大サイズ 2 のキューに対して以下のようにタスクを追加し、最大数を超えた場合、最後のタスクを入れ替えます。 追加されるタスクより優先度が高いタスクでキューが構成される場合は、入れ替えは行われません。 taskQueue = new TaskQueue(TaskQueueLimitType.SwapLast, maxSize: 2); taskQueue.Enqueue(async ct => { ... }); taskQueue.Enqueue(async ct => { ... }); // このタスクが破棄される taskQueue.Enqueue(async ct => { ... });"
  },
  "ja/TaskQueue/player-loop.html": {
    "href": "ja/TaskQueue/player-loop.html",
    "title": "PlayerLoop の指定 | MewCore",
    "keywords": "PlayerLoop の指定 Queue を処理する PlayerLoop のタイミングを指定することができます。 以下のタイミング型が定義されています。 タイミング 説明 MewUnityEarlyUpdate Unityのフレーム更新の最初の段階で呼ばれます。この時点で、最初のイベント処理や入力の更新が行われます。 MewUnityFixedUpdate 物理演算の更新が行われるタイミングです。Unityエンジンにおける固定フレームレートでの処理に対応します。 MewUnityPreUpdate Update メソッドの前に実行される処理です。シーンの状態更新やアニメーションの更新などが含まれます。 MewUnityUpdate (既定値) 主にゲームロジックの更新に使用される、通常の Update メソッドのタイミングです。 MewUnityPreLateUpdate LateUpdate の前に実行される処理です。一部のカメラやアニメーションの後処理が行われる可能性があります。 MewUnityPostLateUpdate フレームの最後に実行される処理で、レンダリングの前準備やカメラの最終更新が含まれます。 PlayerLoop のタイミングを指定するには、コンストラクタにタイミング型を指定します。 例えば MewUnityFixedUpdate を指定ることで、フレームスキップが発生した場合にキューの処理が遅延することを防くことができます。 var fixedUpdateTaskQueue = new TaskQueue<MewUnityFixedUpdate>();"
  },
  "ja/index.html": {
    "href": "ja/index.html",
    "title": "インストール | MewCore",
    "keywords": "インストール UPM 経由でインストールすることができます。 以下の git url を指定してください。 git@github.com:mewlist/MewCore.git"
  }
}